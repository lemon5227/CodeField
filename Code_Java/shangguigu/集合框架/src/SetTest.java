import org.junit.Test;

/**
 * Set:存储无序的、不可重复的数据
 *  以HashSet为例：
 *      1.无序性：不等于随机性。存储的数据在底层数组中并非按照数组的索引的顺序添加，而是根据数据的哈希值
 *      2.不可重复性：保证添加的元素安装equals（）判断时，不能返回True
 *
 *  二、添加元素的过程：以HashSet为例：
 *      1.先比较哈希值
 *      2.再比较equals（）
 *      ****向Set中添加元素时要重写hashCode()和equals（）方法
 *      ****重写hashCode()和equals（） 保持一致
 *  三、重写hashCode和equals（）
 *      1.自动重写hashCode方法为什么有31这个数字？
 *          1- 选择系数尽量选大的系数，因为如果计算出来的hash地址越大，所谓的“冲突“越少，查找起来效率也会提高
 *          2- 31只占用5bits，相乘造成的数据溢出的概率较小
 *          3- 31可以由i*31 == （i << 5)-1表示 ，现在很多虚拟机做了相关优化。（提高算法效率）
 *          4- 31是一个素数，素数作用就是如果一个数字乘以这个素数，那么最终的结果只能被这个素数本身和被乘数还有1来整除（减少冲突）
 *      2.
 *
 *      
 */
public class SetTest {
	@Test
	public void test1(){

	}

}
